} else if (is.numeric(dat)) {
func <- function(x) return(dat)
} else {
stop('Input to makeTimeFunc must be numeric or data frame.')
}
return(func)
}
# here the ventilation rate is scaled with the variation in wind speed.
dat_vent <- as.data.frame(dat_int[
, .(time = time, vent_norm = ..vent_rate/mean(wind_speed_ms, na.rm = T) * wind_speed_ms)])
# make a function for interpolating ventilation rate in the ODE call
vent_fun <- makeTimeFunc(dat_vent)
# assume 20 deg C constantly in headspace
T = 273.15 + 20
R = 0.082057
#initial condition of the headspace concentration in kg CH4/m3
y0 <- (dat_int[1, CH4_conc_ppm]/10^6 * 1000)/(R * T) * 16.04/1000# kg CH4/m3 in tank headspace total
#parameters passed to the ODE solver.
pars <- list(vol_HS = vol_HS, emis = emis)
# function that calculates the rate of change of CH4 concentration (derivatives)
rates <- function(t, y, parms, vent_fun){
vol_HS <- parms$vol_HS # m3
emis <- parms$emis # kg/hour
vent <- vent_fun(t) # m3/hour
derivatives <- c(
# m3/hour * kg/m3 * 1/m3 + kg/hour * 1/m3 = kg/hour/m3 + kg/hour/m3 = kg/hour/m3
y = - (vent * y)/vol_HS + emis/vol_HS
)
emission_rate <- y * vent # kg/m3 * m3/hour = kg/hour
return(list(derivatives, emission_rate))
}
# Call ODE solver
out <- deSolve::lsoda(y = y0, times = times, func = rates, parms = pars, vent_fun = vent_fun)
out <- data.frame(out)
# fix names in output
names(out) <- c('hours','CH4_conc_kg_m3','CH4_emis_kg_hour')
load("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/ABM_parm/data/demo_data.RData")
install.packages('devtools')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = TRUE)
temp <- rnorm(1000, 20, sd = 1)
hist(temp)
temp <- rnorm(100000, 20, sd = 1)
hist(temp)
hist(temp, bins = 100)
hist(temp, breaks = 100)
temp_sample <- sample(temp, 10000, replace = T)
pred = 0.52 * temp_sample
hist(pred, breaks = 100)
evap = 0.52 * temp_sample
hist(evap, breaks = 100)
quantile(evap, probs = seq(0, 1, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0.025, 0.975))
quantile(evap, probs = seq(0.025, 1, 0.025))
quantile(evap, probs = seq(0.025, 0.025))
?quantile
quantile(evap, probs = seq(0.025, 0.25))
quantile(evap, probs = seq(0.025, 10, 0.25))
quantile(evap, probs = seq(0.025, 1, 0.25))
quantile(evap, probs = seq(0, 1, 0.025))
parameter <- rnorm(100, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
parameter <- rnorm(20, 52, sd = 4)
hist(parameter, breaks = 10)
fitted_parameter <- rnorm(20, 52, sd = 4)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 10)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 5)
fitted_parameter <- rnorm(20, 0.52, sd = 0.04)
hist(fitted_parameter, breaks = 8)
library(boot)
??boot
mean_fun <- function(data, indices) colMeans(data[indices,])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
mean_fun <- function(data, indices) colMeans(data[indices])
repeats = 10000
boot_obj <- boot(fitted_parameter, statistic = mean_fun, R = repeats)
fitted_parameter
dat <- as.data.frame(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat[indices,]
mean_fun <- function(data, indices) colMeans(data[indices,])
dat <- as.data.frame(fitted_parameter)
dat
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- as.array(fitted_parameter)
boot_obj <- boot(dat, statistic = mean_fun, R = repeats)
dat <- fitted_parameter
repeats = 10000
sample(dat, 20, replace = T)
out <- replicate(10000, sample(dat, 20, replace = T))
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
rbind(out, out1)
}
out <- NULL
for(i in 1:10000){
out1 <- sample(dat, 20, replace = T)
out1 <- mean(out1)
out <- rbind(out, out1)
}
hist(out)
?constrOptim
install.packages('gputools')
install.packages('rpud')
bar <- 1/10^9 * 333
Molar <- bar * 0.025
Molar * 10^9
remove.packages('ABM')
Temp <- 273:330
u <- exp(-3.540+222.21/(Temp-149.37))
plot(Temp, u)
u <- 10^(-3.540+222.21/(Temp-149.37))
plot(Temp, u)
library(biogas)
library(biogas)
calcCOD('C5H7O2N')
library(ABM)
out1 <- abm(365, add_pars = list(xa_fresh = 0.06))
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
plot(out1$time, out1$m2_conc)
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc)
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$m2_conc, xlab = 'days')
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
out1 <- abm(365, add_pars = list(slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
out1 <- abm(365, add_pars = list(xa_init.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_init.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum, col = "red")
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', ylim = c(0,8))
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg')
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', col = "red")
library(ABM)
out1 <- abm(365, add_pars = list(xa_fresh.m2 = 0.16))
out2 <- abm(365, add_pars = list(xa_fresh.m2 = 0.06))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc)
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate)
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum)
out1 <- abm(365, add_pars = list(xa_init.m2 = 0.16, slurry_prod_rate = 0, empty_int = 0))
out2 <- abm(365, add_pars = list(xa_init.m2 = 0.06, slurry_prod_rate = 0, empty_int = 0))
plot(out1$time, out1$m2_conc, xlab = 'days', ylab = 'gCOD/kg slurry')
lines(out2$time, out2$m2_conc, col = "red")
plot(out1$time, out1$CH4_emis_rate, xlab = 'days', ylab = 'gCH4/day')
lines(out2$time, out2$CH4_emis_rate, col = "red")
plot(out1$time, out1$CH4_emis_cum, xlab = 'days', ylab = 'gCH4 total')
lines(out2$time, out2$CH4_emis_cum, col = "red")
plot(out1$time, out1$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', ylim = c(0,8))
lines(out2$time, out2$VFA_conc, xlab = 'days', ylab = 'gCOD/kg', col = "red")
View(out2)
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = T)
# Runs all scenarios for sensitivity predicitons
rm(list = ls())
library(tidyr)
library(ggplot2)
library(ABM)
# Load R functions
ff <- list.files('../R', full.names = TRUE)
for (i in ff) source(i)
# Get packages
abm_packages()
# Get input file names
fs <- list.files("../inputs/", full.names = TRUE)
fs <- fs[grepl('xlsm', fs)]
output <- NULL
for (i in fs){
years <- 4
dat <- i
Catch_errors <- function(x, y){
tryCatch(
#try to do this
{
out <- abm_farm(dat, storage_mode = TRUE, years, temp_overwrite = 'Vechi')
},
#if an error occurs, tell me the error
error = function(e) {
message('An Error Occurred')
print(e)
}
)
}
out <- Catch_errors(x,y)
# temporary work around a bug.
# That is, if multiple sections are simulated
# The out does not contain excreta data.
if(is.null(out$norm)){
out <- out
} else{
out <- out$norm
}
if(length(out) == 2) out['call'] <- as.character(out['call'])
input_barn <- read_excel(i, sheet = 'in-barn', skip = 1, col_names = TRUE)
input_storage <- read_excel(i, sheet = 'out-of-barn', skip = 1, col_names = TRUE)
output1 <- c(list(input_barn = input_barn, input_storage = input_storage), out, i)
# combine outputs
output <- c(output, output1)
xlsm <- gsub('../inputs/','', i)
xlsx <- gsub('xlsm','xlsx', xlsm)
save_file <- paste0('../outputs/', xlsx)
write.xlsx(output1, save_file, append = TRUE, rowNames = TRUE)
}
remove.packages('ABM')
devtools::install_github('AU-BCE-EE/ABM', build_vignettes = T)
paste0('p', seq(1:10))
pairs <- rep(paste0('p', seq(1:10)), 2)
sample(pairs, 4)
pairs <- rep(paste0('p', seq(1:10)), 2)
result <- c(0)
reps <- 10^6
for(i in 1:reps){
sample <- sample(pairs, 4)
if(length(unique(sample)) == 2) result <- c(result, 1)
}
print(paste('the chance is', sum(result)/reps))
?sample
pairs <- rep(paste0('p', seq(1:10)), 2)
result <- c(0)
reps <- 10^7
for(i in 1:reps){
sample <- sample(pairs, 4)
if(length(unique(sample)) == 2) result <- result + 1
}
print(paste('the chance is', result/reps))
3/323
reticulate::repl_python()
quit
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
def my_checker_board2(n):
"""
The function should prove a checker board in which the upper-left element␣
↪is always 1
Input: The function takes an input n, which defines the size of the checker␣
↪board (n x n)
Output: The function provides a checker board
"""
# Define an array with zeros
board = np.zeros((n, n), dtype = int)
# Insert the number 1 in even rows and even columns
board[0::2, 0::2] = 1
# Print the output
print(board)
# Insert the number 1 in odd rows and odd columns
board[1::2, 1::2] = 1
# Print the output
print(board)
return board
print(my_checker_board(1))
print(my_checker_board(2))
print(my_checker_board(5))
def my_checker_board2(n):
board = np.zeros((n, n), dtype = int) #Define an array with zeros
board[0::2, 0::2] = 1 # Insert the number 1 in even rows and even columns
print(board)# Print the output
board[1::2, 1::2] = 1 # Insert the number 1 in odd rows and odd columns
#Print the output
print(board)
return board
print(my_checker_board(1))
print(my_checker_board(2))
print(my_checker_board(5))
def my_checker_board2(n):
board = np.zeros((n, n), dtype = int) #Define an array with zeros
board[0::2, 0::2] = 1 # Insert the number 1 in even rows and even columns
print(board)# Print the output
board[1::2, 1::2] = 1 # Insert the number 1 in odd rows and odd columns
#Print the output
print(board)
return board
print(my_checker_board(1))
print(my_checker_board(2))
print(my_checker_board(5))
def my_checker_board2(n):
board = np.zeros((n, n), dtype = int) #Define an array with zeros
board[0::2, 0::2] = 1 # Insert the number 1 in even rows and even columns
print(board)# Print the output
board[1::2, 1::2] = 1 # Insert the number 1 in odd rows and odd columns
#Print the output
print(board)
return board
print(my_checker_board(1))
print(my_checker_board(2))
print(my_checker_board(5))
def my_checker_board2(n):
board = np.zeros((n, n), dtype = int) #Define an array with zeros
board[0::2, 0::2] = 1 # Insert the number 1 in even rows and even columns
print(board)# Print the output after even rows are added
board[1::2, 1::2] = 1 # Insert the number 1 in odd rows and odd columns
#Print the output with both even and odd inputs
print(board)
return board
print(my_checker_board(1))
print(my_checker_board(2))
print(my_checker_board(5))
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
setwd("C:/Users/au277187/OneDrive - Aarhus universitet/Documents/GitHub/AU-BCE-EE/Dalby-2025-KVIK/scripts")
rm(list = ls())
library(readxl)
library(data.table)
library(openxlsx)
dat <- fread('../data/dat_merged.csv')
CO2_eq <- c(CH4 = 28, N2O = 265)
## SVIN
# gylle systemer
toklimastald_smågrise <- c(20)
spalter_smågrise <- c(46)
spalter_33_67_slagtesvin <- c(47)
spalter_50_75_slagtesvin <- c(72, 19)
spalter_25_50_slagtesvin <- c(73)
løs_individuel_søer <- c(60, 63, 8, 10, 80, 79)
farestald_delvis_spalte <- c(64)
farestald_fuldspalte <- c(65)
svin_gylle <- c(20,46,47,72,19,73,60,63,8,10,80,79,64,65)
## KVÆG
# gylle systemer
kvæg_ringkanal <- c(6, 13)
kvæg_fast_skrab <- c(5, 11)
kvæg_spalter_skrab <- c(7, 14)
kvæg_hæld_fast_skrab <- c(49)
kvæg_andre_hyppig <- c(2, 4) # 2 is spaltegulvbokse, what is that?
kvæg_gylle <- c(6,13,5,11,7,14,49,2,4)
model_gruppe_navne <- c('toklimastald_smågrise',
'spalter_smågrise',
'spalter_33_67_slagtesvin',
'spalter_50_75_slagtesvin',
'spalter_25_50_slagtesvin',
'løs_individuel_søer',
'farestald_delvis_spalte',
'farestald_fuldspalte',
'kvæg_ringkanal',
'kvæg_fast_skrab',
'kvæg_spalter_skrab',
'kvæg_hæld_fast_skrab',
'kvæg_andre_hyppig'
)
cols <- c('CH4_dyr_stald', 'CH4_dyr_lager', 'CH4_dyr_biog', 'NH3_dyr_stald', 'NH3_dyr_lager','N2O_dyr_dir_tot', 'N2O_dyr_indir_tot', 'strøm_CO2_ton')
tot_cols <- paste0('tot', cols)
dat[, strøm_CO2_ton := 0]
# Initialize the total columns with 0
dat <- dat[, (tot_cols) := 0][!duplicated(dat)]
# if biogas is used change the CH4 produktion to include emission from prestorage tank and change storage to digestate emission.
# also change N2O emission (based on national inventory report 2023, p431)
biogas <- copy(dat)[Scenarie == 'kontrol'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'biogas']
ugentlig_biogas <- copy(dat)[Scenarie == 'ugentlig'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'ugentlig_biogas']
køling_biogas <- copy(dat)[Scenarie == 'køling'][
, ":="(CH4_dyr_stald = CH4_dyr_Stald_aft,
CH4_dyr_lager = CH4_dyr_afg,
N2O_dyr_dir_tot = N2O_dyr_dir_tot * 0.0006/0.00475)][
, Scenarie := 'køling_biogas']
dat <- rbind(dat, biogas, ugentlig_biogas, køling_biogas)
dat[grepl('køling', Scenarie) & DyreType == 'smågrise', strøm_CO2_ton := 1.3]
dat[grepl('køling', Scenarie) & DyreType == 'slagtesvin', strøm_CO2_ton := 1.4]
dat[grepl('køling', Scenarie) & DyreType == 'søer', strøm_CO2_ton := 1.8]
# Multiply each column in 'cols' by 1 (no change), emis units in kg CH4/m3/year or kg CH4/year, kg CO2 eq/m3/year, kg CO2 eq/year
# totCO2_eq_tot is in kt CO2 eq emitted (so kg CO2 eq multiplied by 10^6)
emis <- dat[, (cols) := lapply(.SD, function(x) x * 1), .SDcols = cols, by = c('StaldID', 'Scenarie', 'GoedningsNavn')][
, (tot_cols) := lapply(.SD, function(x) x * TotGoednabDyr), .SDcols = cols, by = c('StaldID', 'Scenarie')][
, ":="(CH4_dyr_tot = CH4_dyr_stald + CH4_dyr_lager,
NH3_dyr_tot = NH3_dyr_stald + NH3_dyr_lager,
N2O_dyr_tot = N2O_dyr_indir_tot + N2O_dyr_dir_tot)][
, ":=" (CO2_eq_tot_CH4 = CH4_dyr_tot * ..CO2_eq[['CH4']],
CO2_eq_tot_N2O = N2O_dyr_tot * ..CO2_eq[['N2O']])][
, CO2_eq_tot := CO2_eq_tot_N2O + CO2_eq_tot_CH4 + strøm_CO2_ton][
, ":="(totCH4_dyr_tot = totCH4_dyr_stald + totCH4_dyr_lager,
totN2O_dyr_tot = totN2O_dyr_dir_tot + totN2O_dyr_indir_tot)][
, totCO2_eq_tot := (totCH4_dyr_tot * ..CO2_eq[['CH4']] +
totN2O_dyr_tot * ..CO2_eq[['N2O']] + totstrøm_CO2_ton)/1e+06]
# totCO2_eq_fortræng is in kt CO2 eq (so kg CO2 eq multiplied by 10^6)
emis[, model_gruppe := 'char']
emis[!grepl('biogas', Scenarie), ":="(CH4_dyr_biog = 0, totCH4_dyr_biog = 0)]
# totCO2_eq_fortræng is in kt CO2 eq (so kg CO2 eq multiplied by 10^6)
emis[, model_gruppe := 'char']
emis[!grepl('biogas', Scenarie), ":="(CH4_dyr_biog = 0, totCH4_dyr_biog = 0)]
emis[, ":="(CO2_eq_fortræng = CH4_dyr_biog * 2.32,
totCO2_eq_fortræng = (totCH4_dyr_biog * 2.32)/1e+06)][
, ":="(CO2_eq_tot = CO2_eq_tot,
totCO2_eq_tot = totCO2_eq_tot)
]
for(i in model_gruppe_navne){
emis[StaldID %in% eval(parse(text = i)), model_gruppe := i]
}
emis_summary <- emis[, .(CH4_dyr_stald = unique(CH4_dyr_stald),
CH4_dyr_lager = unique(CH4_dyr_lager),
CH4_dyr_tot = unique(CH4_dyr_tot),
N2O_dyr_tot = unique(N2O_dyr_tot),
CO2_eq_fortræng = unique(CO2_eq_fortræng),
CO2_eq_tot = unique(CO2_eq_tot),
totCO2_eq_tot = sum(totCO2_eq_tot, na.rm = T)), by = c('Scenarie', 'model_gruppe')]
TotGoednabDyr <- setDT(read_excel('../output/TotGoedningabDyr.xlsx'))
Tech_udb <- setDT(read_excel('../data/teknologi_udbredelse.xlsx'))
Tech_pot <- setDT(read_excel('../data/teknologi_potentiale.xlsx'))
out <- merge.data.table(emis_summary, TotGoednabDyr)[Scenarie != "" & Scenarie != 'char']
techs <- unique(emis_summary[Scenarie != 'kontrol', Scenarie])
model_gruppe <- unique(out[, model_gruppe])
for(i in model_gruppe){
for(o in techs){
if(any(out[model_gruppe == i, Scenarie] == o)){
out[model_gruppe == i & Scenarie == o, ":="(udbredelse = ..Tech_udb[model_gruppe == i, eval(parse(text = o))],
potentiale = ..Tech_pot[model_gruppe == i, eval(parse(text = o))])]
}
}
}
out <- out[, ":="(reduktion_totCO2_eq_tot = (totCO2_eq_tot[Scenarie == 'kontrol'] - totCO2_eq_tot) * ((potentiale-udbredelse)/100),
reduktion_CO2_eq_tot_m3 = CO2_eq_tot[Scenarie == 'kontrol'] - CO2_eq_tot), by = 'model_gruppe'][order(Scenarie)]
out[, TotGoedningabDyr_kt_year_pot := TotGoednabDyr_kt_year * ((potentiale - udbredelse)/100)]
out <- out[!duplicated(out[, c('model_gruppe', 'Scenarie')])]
out_pot_goedning <- out[Scenarie != 'kontrol', .(TotGoednabDyr_kt_år = sum(TotGoedningabDyr_kt_year_pot)), by = c('Scenarie', 'Dyr')]
write.xlsx(out_pot_goedning, '../output/udbred_poten_kt_Goedn_år.xlsx')
out_dyr <- copy(out)
out_dyr <- out_dyr[, .(sum_reduktion_totCO2_eq_tot = sum(reduktion_totCO2_eq_tot),
mean_reduktion_totCO2_eq_tot_m3 = sum(reduktion_CO2_eq_tot_m3 * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_stald = sum(CH4_dyr_stald * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_lager = sum(CH4_dyr_lager * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
CH4_dyr_tot = sum(CH4_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
N2O_dyr_tot = sum(N2O_dyr_tot * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
udbredelse = sum(udbredelse * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year),
fortrængning = sum(CO2_eq_fortræng * TotGoednabDyr_kt_year)/sum(TotGoednabDyr_kt_year))
, by = c('Scenarie', 'Dyr')]
write.xlsx(out_dyr, '../output/emis_table_DyrSamlet_KVIK.xlsx')
units <- data.frame(t(data.frame(units = c('model_gruppe',
'Scenarie',
'Udledning stald, kg CH4 pr. m3 ab dyr pr. år',
'Udledning lager, kg CH4 pr. m3 ab dyr pr. år',
'Udledning total, kg CH4 pr. m3 ab dyr pr. år',
'Udledning total, kg N2O pr. m3 ab dyr pr. år',
'Biogas fortrængning, kg CO2e pr. m3 ab dyr pr. år',
'Udledning total, kg CO2e netto pr. m3 ab dyr pr. år',
'Udledning total, kt CO2e netto pr. år',
'DyreType',
'Gødning total, kt ab dyr pr. år',
'Tørstof total, kt ab dyr pr. år',
'Dyr',
'Gødning, kg ab dyr pr. dyr prod/årsdyr',
'udbred. tekn., %',
'potent. tekn., %',
'Gødning, kg ab lager pr. kg ab dyr',
'Gødning total, kt ab lager pr. år',
'Tørstof, kg ab dyr pr. m3 ab dyr',
'udbred., % af modelgruppe',
'potent., % af modelgruppe',
'reduktion total potentiale, kt CO2e pr. år',
'reduktion, kg CO2e reduceret pr. m3 ab dyr',
'Gødning total potentiale, kt ab dyr pr. år'))))
names(units) <- names(out)
out <- rbind(units, out)
setDT(out)
out_table <- out[, .(model_gruppe, Scenarie, CH4_dyr_stald, CH4_dyr_lager, CH4_dyr_tot, N2O_dyr_tot,
CO2_eq_fortræng, CO2_eq_tot, TotGoednabDyr_kt_year, TotTSabDyr_kt_year, udbredelse, potentiale,
reduktion_CO2_eq_tot_m3, reduktion_totCO2_eq_tot, Dyr)]
names(out_table) <- c(t(out_table[1,]))
unique(out_table$model_gruppe)
out_table <- out_table[-1,]
out_table[, model_gruppe:= factor(model_gruppe, levels = c('kvæg_ringkanal','kvæg_fast_skrab','kvæg_spalter_skrab',
'kvæg_hæld_fast_skrab','kvæg_andre_hyppig',
'spalter_33_67_slagtesvin','spalter_25_50_slagtesvin','spalter_50_75_slagtesvin',
'løs_individuel_søer','farestald_delvis_spalte', 'farestald_fuldspalte',
'toklimastald_smågrise','spalter_smågrise'))]
setorder(out_table, Scenarie, model_gruppe)
cols_index <- which(!names(out_table) %in% c('model_gruppe', 'Scenarie','Dyr'))
out_table[, (cols_index) := lapply(.SD, function(x) round(as.numeric(x), 3)), .SDcols = cols_index]
write.xlsx(out_table, '../output/emis_table_KVIK.xlsx')
